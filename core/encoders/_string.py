from ..rpc_marshaller import ClacksRPCDecoder, ClacksRPCEncoder


# ----------------------------------------------------------------------------------------------------------------------
class StringDecoder(ClacksRPCDecoder):

    # ------------------------------------------------------------------------------------------------------------------
    @classmethod
    def viable(cls, type_key: str):
        return type_key == 'str'

    # ------------------------------------------------------------------------------------------------------------------
    @classmethod
    def decode(cls, value: bytes):
        return str(value.decode('utf-8'))


# ----------------------------------------------------------------------------------------------------------------------
class ByteStringDecoder(ClacksRPCDecoder):

    # ------------------------------------------------------------------------------------------------------------------
    @classmethod
    def viable(cls, type_key):
        return type_key == 'bytes'

    # ------------------------------------------------------------------------------------------------------------------
    @classmethod
    def decode(cls, value: bytes):
        return bytes(value)



# ----------------------------------------------------------------------------------------------------------------------
class StringEncoder(ClacksRPCEncoder):

    # ------------------------------------------------------------------------------------------------------------------
    @classmethod
    def viable(cls, value: object):
        return isinstance(value, str)

    # ------------------------------------------------------------------------------------------------------------------
    @classmethod
    def encode(cls, value: str):
        return 'str', bytes(value, 'utf-8')


# ----------------------------------------------------------------------------------------------------------------------
class ByteStringEncoder(ClacksRPCEncoder):

    # ------------------------------------------------------------------------------------------------------------------
    @classmethod
    def viable(cls, value):
        return isinstance(value, bytes)

    # ------------------------------------------------------------------------------------------------------------------
    @classmethod
    def encode(cls, value):
        return 'bytes', value
